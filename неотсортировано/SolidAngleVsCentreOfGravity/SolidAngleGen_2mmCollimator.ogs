
//see Lab Talk Language/Command Reference for commands discription

//The create command creates an empty dataset which is set to hold 1000 points
//create xrange -n 1000;
//create yrange -n 1000;

//The uniform(npts, seed) function returns a range with npts number of values.  The initial starting value in the range is determined by seed.  
//The values are random numbers with uniform (between 0 and 1) distribution.  If seed is omitted, a different seed is used each time the function is called.
//xrange = uniform(1000,);
//yrange = uniform(1000,);

//The edit command opens the worksheet for the active dataset
//edit mean;
//edit Data1_a;

//Accounting for refraction in glass plate by using d/n;
rn = 1.5;
d = 1.3;
z0 = d/rn;
x0 = 3;
y0 = 3;
a = 2/sqrt(2);
b = 5.2;
Tgr = 1;
dgr = 0.1;
agr = 1;
dagr = dgr/agr;
Tgl = 1;
Rs = 0;
Rp = 0;
xgapd = -999;
ygapd = -999;

loop (i, 1, 1000) 
  {
//The rnd(seed) and ran(seed) functions return a value between 0 and 1 from a uniformly distributed sample.
//Simulating solid angle.
    x = x0 - a/2 + a * ran(0);
    y = y0 - a/2 + a * ran(0);
  z = z0 + b;     

    loop (iy, 1, 3) 
      {
        ygapd = 10 - (iy-1)*10;
    loop (ix, 1, 3)
      {
        ngapd = 1 + (ix-1) + (iy-1)*3;
        xgapd = -10 + (ix-1)*10;
        rg2 = (x-xgapd)^2 + (y-ygapd)^2;
        rg = sqrt(rg2);
        R2 = rg2 + z^2;
           costeta = z/sqrt(R2);

//Accountung for Frenel reflection in glass plate.
//Calculating incident angle tetai and refracted angle tetat.
           tani = rg/z;
           tetai = atan(tani);
           loop (k, 1, 4)
             {                
               tani = rg / ( z - d/rn + d / sqrt( 1 + (rn^2 - 1)/(cos(tetai))^2 ) );   
               tetai = atan(tani);
             }
           tetat = asin(sin(tetai)/rn); 
           Rs = ( sin(tetai-tetat) / sin(tetai+tetat) )^2;
           Rp = ( tan(tetai-tetat) / tan(tetai+tetat) )^2;
     Tgl = 1 - (Rs+Rp)/2;
     if (Tgl < 0) Tgl = 0; 

//Accounting for grid transparancy.
// In one direction
           Tgr1 = 1 - dagr/cos(tetai);
//In another direction
           Tgr2 = 1 - dagr;
//Making average of two directions
           Tgr = (Tgr1 + Tgr2)/2;
           if (Tgr < 0) Tgr = 0;

//         Tgl = 1;
           solidang = Tgr * Tgl^2 * 4.4 / R2 * costeta / 4 / 3.1416;

//Cell Function description
//The Cell( ) function can be used with either a worksheet or a matrix. 
//When refering to none-active book, this notation can only support the bookname! prefix for active sheet. 
//cell(5,2) = 50; // Sets row 5, column 2 cell in active window 
//                //(worksheet or matrix) to 50
// You can use prefix for different active page, 
// but target is still the active sheet in that page
 
// Sets row 10, column 1 in active sheet of Book5 to 100
//Book5!cell(10,1) = 100; 
// Function accepts variables
//for(ii = 1 ; ii <= 32 ; ii++)
//{
//    for(jj = 1 ; jj <= 32 ; jj++)
//    {
//        MBook1!cell(ii,jj) = (ii-1) * 32 + jj;
//    }
//}

           Book1!cell(i,1) = x;
           Book1!cell(i,2) = y;
           Book1!cell(i,3) = z;
                      Book1!cell(i,3+ngapd) = solidang;
       }
       }
  } 

//Delete all datasets that are not in any worksheet and not used in any graphs
  delete -as;

